palindrome
model small
printmsg macro msg
push ax
push dx
LEA dx,msg
mov ah,09h
int 21h
pop dx
pop ax
endm
.data
msg1 db 0ah,0dh,"enter
the palindrome $"
msg2 db 0ah,0dh,"it ia a
palindrome $"
msg3 db 0ah,0dh,"it is
not a palindrome $"
msg4 db 0ah,0dh," $"
msg5 db 0ah,0dh,"length
is $"
buffer db 10
db 12 dup('$')
len db 00
.code
mov ax,@data
mov ds,ax
printmsg msg1
LEA dx,buffer
mov ah,0ah
int 21h
printmsg msg4
mov si,02
LEA dx,buffer[si]
mov ah,09h
int 21h
mov al,buffer[01]
mov len,al
printmsg msg5
mov dl,len
add dl,30h
mov ah,02h
int 21h
mov si,02
mov al,len
xor ah,ah
mov di,ax
mov cl,00
al : cmp cl,len
je a4
mov dl,buffer[si]
mov dh,buffer[di+1]
cmp dl,dh
jnz a2
inc si
dec di
inc cl
jmp al
a4 : printmsg msg2
jmp a3
a2 : printmsg msg3
a3 :
mov ah,4ch
int 21h
end
OUTPUT
Enter the palindrome :
malayalam
malayalam
length is 9
it is a palindrome
Enter the palindrome :
english
english
length is 7
it is not a palindrome
CALCULATOR
.model small
printmsg macro msg
push ax
push bx
push cx
push dx
LEA dx,msg
mov ah,09h
int 21h
pop dx
pop cx
pop bx
pop ax
endm
.data
msg1 db 0ah,0dh,"Enter
first number $"
msg2 db 0ah,0dh,"Enter
second number $"
msg3 db 0ah,0dh,"1-
addition,2-sub,3-mul,4-
div $"
msg4 db 0ah,0dh,"Enter
your option $"
msg5 db 0ah,0dh,"Your
result is $"
msg6 db 0ah,0dh,"NO
SUCH OPTION $"
num dw 0
cnt dw 0
choice dw 0
a dw 0
b dw 0
.code
mov ax,@data
mov ds,ax
printmsg msg1
call readnum
mov ax,num
mov a,ax
printmsg msg2
call readnum
mov bx,num
mov b,bx
printmsg msg3
call readnum
mov ax,num
mov choice,ax
cmp choice,01
je addi
cmp choice,02
je subt
cmp choice,03
je multi
cmp choice,04
je divi
printmsg msg6
call printnum
jmp ex
addi :
printmsg msg5
mov ax,a
add ax,b
mov num,ax
call printnum
jmp ex
subt :
printmsg msg5
mov ax,a
mov bx,b
sub ax,bx
mov num,ax
call printnum
jmp ex
multi :
printmsg msg5
mov ax,a
mov bx,b
mul bx
mov num,ax
call printnum
jmp ex
divi :
printmsg msg5
mov ax,a
mov bx,b
XOR dx,dx
div bx
mov num,ax
call printnum
jmp ex
ex :
mov ah,4ch
int 21h
readnum proc near
push ax
push bx
push cx
push dx
mov num,00
r1:
mov ah,01h
int 21h
cmp al,0dh
je r2
mov cx,ax
and cx,00ffh
sub cx,30h
mov bx,10
mov ax,num
mul bx
add ax,cx
mov num,ax
jmp r1
r2:
pop dx
pop cx
pop bx
pop ax
ret
readnum endp
printnum proc near
push ax
push bx
push cx
push dx
mov ax,num
mov bx,10
p1:
mov dx,00
div bx
push dx
inc cnt
cmp ax,00
jne p1
p2:
cmp cnt,00
je p3
pop dx
add dl,30h
mov ah,02h
int 21h
dec cnt
jmp p2
p3:
pop dx
pop cx
pop bx
pop ax
ret
printnum endp
end
OUTPUT
Enter the first number :
10
enter the second number
: 5
1 - addition , 2 -
substraction , 3 –
multiplication , 4-division
: 1
your result is 15
Enter the first number :
10
enter the second number
: 5
1 - addition , 2 -
substraction , 3 –
multiplication , 4-division
: 2
your result is 5
Enter the first number :
10
enter the second number
: 5
1 - addition , 2 -
substraction , 3 –
multiplication , 4-division
: 3
your result is 50
Enter the first number :
10
enter the second number
: 5
1 - addition , 2 -
substraction , 3 –
multiplication , 4-division
: 4
your result is 2
STEPPER
MOTOR(180)
1000 : mov al,80h
out 56,al
mov cx,0019
mov al,0a
out 50,al
call 2000
mov al,06
out 50,al
call 2000
mov al,05
out 50,al
call 2000
mov al,09
out 50,al
call 2000
dec cx
cmp cx,0000
jnz 1009
call 2000
HLT
2000 : mov dx,1000
Dec dx
Cmp dx,0000
Jnz 2004
Ret
Output
Program executed
successfully and it rotated
180 degree
clock wise
STEPPER
MOTOR(360)
1000 : mov al,80h
out 56,al
mov cx,0032
mov al,09
out 50,al
call 2000
mov al,05
out 50,al
call 2000
mov al,06
out 50,al
call 2000
mov al,0a
out 50,al
call 2000
dec cx
cmp cx,0000
jnz 1009
call 2000
HLT
2000 : mov dx,1000
Dec dx
Cmp dx,0000
Jnz 2004
Ret
Output
Program executed
successfully and it rotated
360 degree
anticlock wise
Triangular wave
1000: MOV AL,80H
1003: OUT 56, AL
1005: MOV AL, 00H
1008: OUT 50, AL
1000A: INC AL
l00C:CMP AL, 0FFH
100F: JNE 1008
1011 : OUT 50, AL
1013 :DEC AL
1015: CMP AL, 00H
1018: JNE 1011
101A: JMP 1005
HLT
Sawtooth wave
2000: MOV AL, 80H
2003: OUT 50, AL
2005: MOV AL, 00H
2008: OUT 50, AL
200A: MOV AL, 0FFH
200D: OUT 50, AL
200F:DEC AL
2011: CMP AL, 00H
2014: JNE 200D
2016: JMP 2005
HLT
Square ware
3000: MOV AL,80H
3003: OUT 56,AL
3005:MOV AL,00H
3008: OUT 50, AL
300A:CALL 4000
300D:MOV AL,0FFH
3010:OUT 50, AL
3012:CALL 4000
3015:JMP 3005
HLT
4000:MOV CX,100
4004: LOOP 4004
4006:RET
200 D OUT SO, AL
: JNE 1008
200F DEC AL
1011 : OUT SO, AL
2011 : CMP AL, OOH
1013 DEC AL
2014: JNE 2000
1015: cmp.AL, OOH
2016: JMp 2005
HLT
1018: ONE 1011
101A: JMP 1005
HLT
Pass -1 of 2-pass
assembler
#include<stdio.h>
#include<conio.h>
#include<string.h>
void main()
{
FILE *f1,*f2,*f3,*f4;
int lc,sa,l,op1,o,len;
char
m1[20],la[20],op[20],otp[
20];
clrscr();
f1=fopen("input.txt","r");
f3=fopen("symtab.txt","w
");
fscanf(f1,"%s %s
%d",la,m1,&op1);
if(strcmp(m1,"START")==0
)
{
sa=op1;
lc=sa;
printf("\t%s\t%s\t%d\n",l
a,m1,op1);
}
else
lc=0;
fscanf(f1,"%s %s",la,m1);
while(!feof(f1))
{
fscanf(f1,"%s",op);
printf("\n%d\t%s\t%s\t%
s\n",lc,la,m1,op);
if(strcmp(la,"-")!=0)
{
fprintf(f3,"\n%d\t%s\n",lc
,la);
}
f2=fopen("optab.txt","r");
fscanf(f2,"%s
%d",otp,&o);
while(!feof(f2))
{
if(strcmp(m1,otp)==0)
{
lc=lc+3;
break;
}
fscanf(f2,"%s
%d",otp,&o);
}
fclose(f2);
if(strcmp(m1,"WORD")==
0)
{
lc=lc+3;
}
else
if(strcmp(m1,"RESW")==0
)
{
op1=atoi(op);
lc=lc+(3*op1);
}
else
if(strcmp(m1,"BYTE")==0)
{
if(op[0]=='X')
lc=lc+1;
else
{
len=strlen(op)-2;
lc=lc+len;}
}
else
if(strcmp(m1,"RESB")==0)
{
op1=atoi(op);
lc=lc+op1;
}
fscanf(f1,"%s%s",la,m1);
}
if(strcmp(m1,"END")==0)
{
printf("Program length
=\n%d",lc-sa);
}
fclose(f1);
fclose(f3);
getch();
}
Input:
Input.txt
COPY START 1000
- LDA ALPHA
- ADD ONE
- SUB TWO
- STA BETA
ALPHA BYTE C'KLNCE
ONE RESB 2
TWO WORD 5
BETA RESW 1
- END -
Optab.txt
LDA 00
STA 23
ADD 01
SUB 05
Output:
Symtab.txt
1012 ALPHA
1017 ONE
1019 TWO
1022 BETA
COPY START 1000
1000 - LDA
ALPHA
1003 - ADD
ONE
1006 - SUB
TWO
1009 - STA
BETA
1012 ALPHA BYTE
C'KLNCE
1017 ONE RESB 2
1019 TWO WORD 5
1022 BETA RESW 1
1025 - END -
Program length = 25
Pass 2-of 2 pass
assembler
#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<ctype.h>
main()
{
FILE
*fint,*ftab,*flen,*fsym;
int
op1[10],txtlen,txtlen1,i,j=
0,len;
char
add[5],symadd[5],op[5],st
art[10],temp[30],line[20],
label[20],mne[10],operan
d[10],symtab[10],opmne[
10];
clrscr();
fint=fopen("input.txt","r")
;
flen=fopen("length.txt","r
");
ftab=fopen("optab.txt","r
");
fsym=fopen("symbol.txt",
"r");
fscanf(fint,"%s%s%s%s",a
dd,label,mne,operand);
if(strcmp(mne,"START")=
=0)
{
strcpy(start,operand);
fscanf(flen,"%d",&len);
}
printf("H^%s^%s^%d\nT^
00%s^",label,start,len,sta
rt);
fscanf(fint,"%s%s%s%s",a
dd,label,mne,operand);
while(strcmp(mne,"END")
!=0)
{
fscanf(ftab,"%s%s",opmn
e,op);
while(!feof(ftab))
{
if(strcmp(mne,opmne)==
0)
{
fclose(ftab);
fscanf(fsym,"%s%s",syma
dd,symtab);
while(!feof(fsym))
{
if(strcmp(operand,symtab
)==0)
{
printf("%s%s^",op,symad
d);
break;
}
else
fscanf(fsym,"%s%s",syma
dd,symtab);
}
break;
}
else
fscanf(ftab,"%s%s",opmn
e,op);
}
if((strcmp(mne,"BYTE")==
0)||(strcmp(mne,"WORD
")==0))
{
if(strcmp(mne,"WORD")=
=0)
printf("0000%s^",operan
d);
else
{
len=strlen(operand);
for(i=2;i<len;i++)
{
printf("%d",operand[i]);
}
printf("^");
}
}
fscanf(fint,"%s%s%s%s",a
dd,label,mne,operand);
ftab=fopen("optab.txt","r
");
fseek(ftab,SEEK_SET,0);
}
printf("\nE^00%s",start);
fclose(fint);
fclose(ftab);
fclose(fsym);
fclose(flen);
fclose(fout);
getch();
}
input.txt:
- COPY START
1000
1000 - LDA
ALPHA
1003 - ADD
ONE
1006 - SUB
TWO
1009 - STA
BETA
1012 ALPHA BYTE
C'KLNCE
1017 ONE RESB 2
1019 TWO WORD 5
1022 BETA RESW 1
1025 - END -
optab.txt:
LDA 00
STA 23
ADD 01
SUB 05
length.txt:25
symbol.txt:
1012 ALPHA
1017 ONE
1019 TWO
1022 BETA
Absolute loader
#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<stdlib.h>
void main()
{
FILE *fp;
int i,addr1,l,j,staddr1;
char
name[10],line[50],name1
[10],addr[10],rec[10],ch,s
taddr[10];
clrscr();
printf("enter program
name:" );
scanf("%s",name);
fp=fopen("abssrc.txt","r")
;
fscanf(fp,"%s",line);
for(i=2,j=0;i<8,j<6;i++,j++)
name1[j]=line[i];
name1[j]='\0';
printf("name from obj.
%s\n",name1);
if(strcmp(name,name1)=
=0)
{
do
{
fscanf(fp,"%s",line);
if(line[0]=='T')
{
for(i=2,j=0;i<8,j<6;i++,j++)
staddr[j]=line[i];
staddr[j]='\0';
staddr1=atoi(staddr);
i=12;
while(line[i]!='$')
{
if(line[i]!='^')
{
printf("00%d \t
%c%c\n",
staddr1,line[i],line[i+1]);
staddr1++;
i=i+2;
}
else i++;
} }
else if(line[0]='E')
fclose(fp);
}while(!feof(fp));
}
getch();
}
INPUT
(ABSSRC.TXT)
H^SAMPLE^001000^0035
T^001000^0C^001003^0
71009$
T^002000^03^111111$
E^001000
OUTPUT
enter program name:
SAMPLE
name from obj. SAMPLE
001000 00
001001 10
001002 03
Bankers
algorithm
#include
#include
int max[100][100];
int alloc[100][100];
int need[100][100];
int avail[100];
int n,r;
void input();
void show();
void cal();
int main()
{
int i,j;
printf("**********
Banker's Algo
************\n");
input();
show();
cal();
getch();
return 0;
}
void input()
{
int i,j;
printf("Enter the no of
Processes\t");
scanf("%d",&n);
printf("Enter the no of
resources instances\t");
scanf("%d",&r);
printf("Enter the Max
Matrix\n");
for(i=0;i<n;i++)< span="">
{
for(j=0;j<r;j++)< span="">
{
scanf("%d",&max[i][j]);
}
}
printf("Enter the
Allocation Matrix\n");
for(i=0;i<n;i++)< span="">
{
for(j=0;j<r;j++)< span="">
{
scanf("%d",&alloc[i][j]);
}
}
printf("Enter the available
Resources\n");
for(j=0;j<r;j++)< span="">
{
scanf("%d",&avail[j]);
}
}
void show()
{
int i,j;
printf("Process\t
Allocation\t Max\t
Available\t");
for(i=0;i<n;i++)< span="">
{
printf("\nP%d\t ",i+1);
for(j=0;j<r;j++)< span="">
{
printf("%d ",alloc[i][j]);
}
printf("\t");
for(j=0;j<r;j++)< span="">
{
printf("%d ",max[i][j]);
}
printf("\t");
if(i==0)
{
for(j=0;j<r;j++)< span="">
printf("%d ",avail[j]);
}
}
}
void cal()
{
int
finish[100],temp,need[10
0][100],flag=1,k,c1=0;
int safe[100];
int i,j;
for(i=0;i<n;i++)< span="">
{
finish[i]=0;
}
//find need matrix
for(i=0;i<n;i++)< span="">
{
for(j=0;j<r;j++)< span="">
{
need[i][j]=max[i][j]-
alloc[i][j];
}
}
printf("\n");
while(flag)
{
flag=0;
for(i=0;i<n;i++)< span="">
{
int c=0;
for(j=0;j<r;j++)< span="">
{
if((finish[i]==0)&&(need[i]
[j]<=avail[j]))
{
c++;
if(c==r)
{
for(k=0;k<r;k++)<
span="">
{
avail[k]+=alloc[i][j];
finish[i]=1;
flag=1;
}
printf("P%d->",i);
if(finish[i]==1)
{
i=n;
}}}}}}
for(i=0;i<n;i++)< span="">
{
if(finish[i]==1)
{
c1++;
}
else
{
printf("P%d->",i);
}
}
if(c1==n)
{
printf("\n The system is in
safe state");
}
else
{
printf("\n Process are in
dead lock");
printf("\n System is in
unsafe state");
}
}
OUTPUT:
Enter the no of processes
5
Enter the no of resources
instances 3
Enter the max matrix
7 5 3
3 2 2
9 0 2
2 2 2
4 3 3
Enter the allocation
matrix
0 1 0
2 0 0
3 0 2
2 1 1
0 0 2
Enter available resources
3 2 2
P1->p3->p4->p2->p0->
The system is in safe
state.
Page
replacement
1.fifo
#include<stdio.h>
#include<conio.h>
int fr[3];
void main()
{
void display();
int
i,j,page[12]={2,3,2,1,5,2,4
,5,3,2,5,2};
int
flag1=0,flag2=0,pf=0,frsiz
e=3,top=0;
clrscr();
for(i=0;i<3;i++)
{
fr[i]=-1;
}
for(j=0;j<12;j++)
{
flag1=0;
flag2=0;
for(i=0;i<12;i++)
{
if(fr[i]==page[j])
{
flag1=1;
flag2=1;
break;
}
}
if(flag1==0)
{
for(i=0;i
{
if(fr[i]==-1)
{
fr[i]=page[j];
flag2=1;
break;
}}}
if(flag2==0)
{
fr[top]=page[j];
top++;
pf++;
if(top>=frsize)
top=0;
}
display();
}
printf("Number of page
faults : %d ",pf);
getch();
}
void display()
{
int i;
printf("\n");
for(i=0;i<3;i++)
printf("%d\t",fr[i]);
}
output
2 -1 -1
2 3 -1
2 3 -1
2 3 1
5 3 1
5 2 1
5 2 4
5 2 4
3 2 4
3 2 4
3 5 4
3 5 2
Number of page faults : 6
2.LRU
#include<stdio.h>
#include<conio.h>
main()
{
int rs[50], i, j, k, m, f,
cntr[20], a[20], min, pf=0;
clrscr();
printf("\nEnter number
of page references -- ");
scanf("%d",&m);
printf("\nEnter the
reference string -- ");
for(i=0;i<m;i++)
scanf("%d",&rs[i]);
printf("\nEnter the
available no. of frames --
");
scanf("%d",&f);
for(i=0;i<f;i++)
{
cntr[i]=0; a[i]=-1;
}
printf(“\nThe Page
Replacement Process is –
\n“);
for(i=0;i<m;i++)
{
for(j=0;j<f;j++)
if(rs[i]==a[j])
{
cntr[j]++;
break;
if(j==f)
{ min = 0;
for(k=1;k<f;k++)
if(cntr[k]<cntr[min])
min=k;
a[min]=rs[i];
cntr[min]=1;
pf++;
}
printf("\n");
for(j=0;j<f;j++)
printf("\t%d",a[j]);
if(j==f)
}
printf(“\tPF No.
%d”,pf);}
printf("\n\n Total
number of page faults --
%d",pf);
getch();
}
INPUT
Enter number of page
references -- 10
Enter the reference string
-- 1 2 3 4 5 2 5 2 5 1 4 3
Enter the available no. of
frames -- 3
OUTPUT
The Page Replacement
Process is –
1 -1 -1 PF No. 1
1 2 -1 PF No. 2
1 2 3 PF No. 3
4 2 3 PF No. 4
5 2 3 PF No. 5
5 2 3
5 2 3
5 2 1 PF No. 6
5 2 4 PF No. 7
5 2 3 PF No. 8
Total number of page
faults -- 8
3.LFU
#include<stdio.h>
#include<conio.h>
main()
{
int rs[50], i, j, k, m, f,
cntr[20], a[20], min, pf=0;
clrscr();
printf("\nEnter number
of page references -- ");
scanf("%d",&m);
printf("\nEnter the
reference string -- ");
for(i=0;i<m;i++)
scanf("%d",&rs[i]);
printf("\nEnter the
available no. of frames --
");
scanf("%d",&f);
for(i=0;i<f;i++)
{
cntr[i]=0; a[i]=-1;
}
printf(“\nThe Page
Replacement Process is –
\n“);
for(i=0;i<m;i++)
{
for(j=0;j<f;j++)
if(rs[i]==a[j])
{
cntr[j]++;
break;
if(j==f)
{ min = 0;
for(k=1;k<f;k++)
if(cntr[k]<cntr[min])
min=k;
a[min]=rs[i];
cntr[min]=1;
pf++;
}
printf("\n");
for(j=0;j<f;j++)
printf("\t%d",a[j]);
if(j==f)
}
printf(“\tPF No.
%d”,pf);}
printf("\n\n Total
number of page faults --
%d",pf);
getch();
}
INPUT
Enter number of page
references -- 10
Enter the reference string
-- 1 2 3 4 5 2 5 2 5 1 4 3
Enter the available no. of
frames -- 3
OUTPUT
The Page Replacement
Process is –
1 -1 -1 PF No. 1
1 2 -1 PF No. 2
1 2 3 PF No. 3
4 2 3 PF No. 4
5 2 3 PF No. 5
5 2 3
5 2 3
5 2 1 PF No. 6
5 2 4 PF No. 7
5 2 3 PF No. 8
Total number of page
faults -- 8
File allocation
techniques
1.sequential file
allocation:
#include < stdio.h>
#include<conio.h>
void main()
{
int f[50], i, st, len, j, c, k,
count = 0;
clrscr();
for(i=0;i<50;i++)
f[i]=0;
printf("Files Allocated are
: \n");
x: count=0;
printf(“Enter starting
block and length of files:
”);
scanf("%d%d", &st,&len);
for(k=st;k<(st+len);k++)
if(f[k]==0)
count++;
if(len==count)
{
for(j=st;j<(st+len);j++)
if(f[j]==0)
{
f[j]=1;
printf("%d\t%d\n",j,f[j]);
}
if(j!=(st+len-1))
printf(” The file is
allocated to disk\n");
}
else
printf(” The file is not
allocated \n");
printf("Do you want to
enter more file(Yes - 1/No
- 0)");
scanf("%d", &c);
if(c==1)
goto x;
else
exit();
getch();
}
Program Output:
Files Allocated are :
Enter starting block and
length of files: 14 3
14 1
15 1
16 1
The file is allocated to
disk
Do you want to enter
more file(Yes - 1/No - 0)1
Enter starting block and
length of files: 14 1
The file is not allocated
Do you want to enter
more file(Yes - 1/No - 0)1
Enter starting block and
length of files: 14 4
The file is not allocated
Do you want to enter
more file(Yes - 1/No - 0)0
2.Indexed file
allocation:
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
void main()
{
int f[50], index[50],i, n, st,
len, j, c, k, ind,count=0;
clrscr();
for(i=0;i<50;i++)
f[i]=0;
x:printf("Enter the index
block: ");
scanf("%d",&ind);
if(f[ind]!=1)
{
printf("Enter no of blocks
needed and no of files for
the index %d on the disk :
\n", ind);
scanf("%d",&n);
}
else
{
printf("%d index is
already allocated \n",ind);
goto x;
}
y: count=0;
for(i=0;i<n;i++)
{
scanf("%d", &index[i]);
if(f[index[i]]==0)
count++;
}
if(count==n)
{
for(j=0;j<n;j++)
f[index[j]]=1;
printf("Allocated\n");
printf("File Indexed\n");
for(k=0;k<n;k++)
printf("%d-------->%d :
%d\n",ind,index[k],f[inde
x[k]]);
}
else
{
printf("File in the index is
already allocated \n");
printf("Enter another file
indexed");
goto y;
}
printf("Do you want to
enter more file(Yes - 1/No
- 0)");
scanf("%d", &c);
if(c==1)
goto x;
else
exit(0);
getch();
}
Program Output:
Enter the index block: 5
Enter no of blocks
needed and no of files for
the index 5 on the disk :
4
1 2 3 4
Allocated
File Indexed
5-------->1 : 1
5-------->2 : 1
5-------->3 : 1
5-------->4 : 1
Do you want to enter
more file(Yes - 1/No - 0)1
Enter the index block: 4
4 index is already
allocated
Enter the index block: 6
Enter no of blocks
needed and no of files for
the index 6 on the disk :
2
7 8
A5llocated
File Indexed
6-------->7 : 1
6-------->8 : 1
Do you want to enter
more file(Yes - 1/No - 0)0
3.linked file
allocation
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
void main()
{
int f[50], p,i, st, len, j, c, k,
a;
clrscr();
for(i=0;i<50;i++)
f[i]=0;
printf("Enter how many
blocks already allocated:
");
scanf("%d",&p);
printf("Enter blocks
already allocated: ");
for(i=0;i<p;i++)
{
scanf("%d",&a);
f[a]=1;
}
x: printf("Enter index
starting block and length:
");
scanf("%d%d", &st,&len);
k=len;
if(f[st]==0)
{
for(j=st;j<(st+k);j++)
{
if(f[j]==0)
{
f[j]=1;
printf("%d--------
>%d\n",j,f[j]);
}
else
{
printf("%d Block is
already allocated \n",j);
k++;
}
}
}
else
printf("%d starting block
is already allocated
\n",st);
printf("Do you want to
enter more file(Yes - 1/No
- 0)");
scanf("%d", &c);
if(c==1)
goto x;
else
exit(0);
getch();
}
Program Output:
Enter how many blocks
already allocated: 3
Enter blocks already
allocated: 1 3 5
Enter index starting block
and length: 2 2
2-------->1
3 Block is already
allocated
4-------->1
Do you want to enter
more file(Yes - 1/No - 0)0
Output for wave
form generator
